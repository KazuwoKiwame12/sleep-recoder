// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"
	entity "sleep-manager/entity"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListInFivedays mocks base method.
func (m *MockClient) ListInFivedays(arg0 time.Time, arg1 string) ([]entity.SleepRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInFivedays", arg0, arg1)
	ret0, _ := ret[0].([]entity.SleepRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInFivedays indicates an expected call of ListInFivedays.
func (mr *MockClientMockRecorder) ListInFivedays(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInFivedays", reflect.TypeOf((*MockClient)(nil).ListInFivedays), arg0, arg1)
}

// ListInMonth mocks base method.
func (m *MockClient) ListInMonth(arg0 int, arg1 time.Month, arg2 string) ([]entity.SleepRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInMonth", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.SleepRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInMonth indicates an expected call of ListInMonth.
func (mr *MockClientMockRecorder) ListInMonth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInMonth", reflect.TypeOf((*MockClient)(nil).ListInMonth), arg0, arg1, arg2)
}

// SaveBedinTime mocks base method.
func (m *MockClient) SaveBedinTime(arg0 time.Time, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBedinTime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBedinTime indicates an expected call of SaveBedinTime.
func (mr *MockClientMockRecorder) SaveBedinTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBedinTime", reflect.TypeOf((*MockClient)(nil).SaveBedinTime), arg0, arg1)
}

// SaveWakeTime mocks base method.
func (m *MockClient) SaveWakeTime(arg0 time.Time, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWakeTime", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWakeTime indicates an expected call of SaveWakeTime.
func (mr *MockClientMockRecorder) SaveWakeTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWakeTime", reflect.TypeOf((*MockClient)(nil).SaveWakeTime), arg0, arg1)
}
